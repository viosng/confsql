package com.viosng.confsql.semantic.model.thrift; /**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-3-28")
public class ThriftExpression implements org.apache.thrift.TBase<ThriftExpression, ThriftExpression._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftExpression> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftExpression");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField QUERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("queryType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField OBJECT_REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("objectReference", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("arguments", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftExpressionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftExpressionTupleSchemeFactory());
  }

  public String id; // required
  /**
   * 
   * @see ThriftExpressionType
   */
  public ThriftExpressionType type; // required
  /**
   * 
   * @see ThriftQueryType
   */
  public ThriftQueryType queryType; // optional
  public String objectReference; // optional
  public String value; // optional
  public String orderType; // optional
  public List<ThriftExpression> schema; // optional
  public List<ThriftExpression> parameters; // optional
  public List<ThriftExpression> arguments; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see ThriftExpressionType
     */
    TYPE((short)2, "type"),
    /**
     * 
     * @see ThriftQueryType
     */
    QUERY_TYPE((short)3, "queryType"),
    OBJECT_REFERENCE((short)4, "objectReference"),
    VALUE((short)5, "value"),
    ORDER_TYPE((short)6, "orderType"),
    SCHEMA((short)7, "schema"),
    PARAMETERS((short)8, "parameters"),
    ARGUMENTS((short)9, "arguments");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TYPE
          return TYPE;
        case 3: // QUERY_TYPE
          return QUERY_TYPE;
        case 4: // OBJECT_REFERENCE
          return OBJECT_REFERENCE;
        case 5: // VALUE
          return VALUE;
        case 6: // ORDER_TYPE
          return ORDER_TYPE;
        case 7: // SCHEMA
          return SCHEMA;
        case 8: // PARAMETERS
          return PARAMETERS;
        case 9: // ARGUMENTS
          return ARGUMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.QUERY_TYPE, _Fields.OBJECT_REFERENCE, _Fields.VALUE, _Fields.ORDER_TYPE, _Fields.SCHEMA, _Fields.PARAMETERS, _Fields.ARGUMENTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftExpressionType.class)));
    tmpMap.put(_Fields.QUERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("queryType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftQueryType.class)));
    tmpMap.put(_Fields.OBJECT_REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("objectReference", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ThriftExpression"))));
    tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ThriftExpression"))));
    tmpMap.put(_Fields.ARGUMENTS, new org.apache.thrift.meta_data.FieldMetaData("arguments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ThriftExpression"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftExpression.class, metaDataMap);
  }

  public ThriftExpression() {
  }

  public ThriftExpression(
    String id,
    ThriftExpressionType type)
  {
    this();
    this.id = id;
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftExpression(ThriftExpression other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetQueryType()) {
      this.queryType = other.queryType;
    }
    if (other.isSetObjectReference()) {
      this.objectReference = other.objectReference;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetOrderType()) {
      this.orderType = other.orderType;
    }
    if (other.isSetSchema()) {
      List<ThriftExpression> __this__schema = new ArrayList<ThriftExpression>(other.schema.size());
      for (ThriftExpression other_element : other.schema) {
        __this__schema.add(other_element);
      }
      this.schema = __this__schema;
    }
    if (other.isSetParameters()) {
      List<ThriftExpression> __this__parameters = new ArrayList<ThriftExpression>(other.parameters.size());
      for (ThriftExpression other_element : other.parameters) {
        __this__parameters.add(other_element);
      }
      this.parameters = __this__parameters;
    }
    if (other.isSetArguments()) {
      List<ThriftExpression> __this__arguments = new ArrayList<ThriftExpression>(other.arguments.size());
      for (ThriftExpression other_element : other.arguments) {
        __this__arguments.add(other_element);
      }
      this.arguments = __this__arguments;
    }
  }

  public ThriftExpression deepCopy() {
    return new ThriftExpression(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.type = null;
    this.queryType = null;
    this.objectReference = null;
    this.value = null;
    this.orderType = null;
    this.schema = null;
    this.parameters = null;
    this.arguments = null;
  }

  public String getId() {
    return this.id;
  }

  public ThriftExpression setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 
   * @see ThriftExpressionType
   */
  public ThriftExpressionType getType() {
    return this.type;
  }

  /**
   * 
   * @see ThriftExpressionType
   */
  public ThriftExpression setType(ThriftExpressionType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 
   * @see ThriftQueryType
   */
  public ThriftQueryType getQueryType() {
    return this.queryType;
  }

  /**
   * 
   * @see ThriftQueryType
   */
  public ThriftExpression setQueryType(ThriftQueryType queryType) {
    this.queryType = queryType;
    return this;
  }

  public void unsetQueryType() {
    this.queryType = null;
  }

  /** Returns true if field queryType is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryType() {
    return this.queryType != null;
  }

  public void setQueryTypeIsSet(boolean value) {
    if (!value) {
      this.queryType = null;
    }
  }

  public String getObjectReference() {
    return this.objectReference;
  }

  public ThriftExpression setObjectReference(String objectReference) {
    this.objectReference = objectReference;
    return this;
  }

  public void unsetObjectReference() {
    this.objectReference = null;
  }

  /** Returns true if field objectReference is set (has been assigned a value) and false otherwise */
  public boolean isSetObjectReference() {
    return this.objectReference != null;
  }

  public void setObjectReferenceIsSet(boolean value) {
    if (!value) {
      this.objectReference = null;
    }
  }

  public String getValue() {
    return this.value;
  }

  public ThriftExpression setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public String getOrderType() {
    return this.orderType;
  }

  public ThriftExpression setOrderType(String orderType) {
    this.orderType = orderType;
    return this;
  }

  public void unsetOrderType() {
    this.orderType = null;
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return this.orderType != null;
  }

  public void setOrderTypeIsSet(boolean value) {
    if (!value) {
      this.orderType = null;
    }
  }

  public int getSchemaSize() {
    return (this.schema == null) ? 0 : this.schema.size();
  }

  public java.util.Iterator<ThriftExpression> getSchemaIterator() {
    return (this.schema == null) ? null : this.schema.iterator();
  }

  public void addToSchema(ThriftExpression elem) {
    if (this.schema == null) {
      this.schema = new ArrayList<ThriftExpression>();
    }
    this.schema.add(elem);
  }

  public List<ThriftExpression> getSchema() {
    return this.schema;
  }

  public ThriftExpression setSchema(List<ThriftExpression> schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  /** Returns true if field schema is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean value) {
    if (!value) {
      this.schema = null;
    }
  }

  public int getParametersSize() {
    return (this.parameters == null) ? 0 : this.parameters.size();
  }

  public java.util.Iterator<ThriftExpression> getParametersIterator() {
    return (this.parameters == null) ? null : this.parameters.iterator();
  }

  public void addToParameters(ThriftExpression elem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<ThriftExpression>();
    }
    this.parameters.add(elem);
  }

  public List<ThriftExpression> getParameters() {
    return this.parameters;
  }

  public ThriftExpression setParameters(List<ThriftExpression> parameters) {
    this.parameters = parameters;
    return this;
  }

  public void unsetParameters() {
    this.parameters = null;
  }

  /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
  public boolean isSetParameters() {
    return this.parameters != null;
  }

  public void setParametersIsSet(boolean value) {
    if (!value) {
      this.parameters = null;
    }
  }

  public int getArgumentsSize() {
    return (this.arguments == null) ? 0 : this.arguments.size();
  }

  public java.util.Iterator<ThriftExpression> getArgumentsIterator() {
    return (this.arguments == null) ? null : this.arguments.iterator();
  }

  public void addToArguments(ThriftExpression elem) {
    if (this.arguments == null) {
      this.arguments = new ArrayList<ThriftExpression>();
    }
    this.arguments.add(elem);
  }

  public List<ThriftExpression> getArguments() {
    return this.arguments;
  }

  public ThriftExpression setArguments(List<ThriftExpression> arguments) {
    this.arguments = arguments;
    return this;
  }

  public void unsetArguments() {
    this.arguments = null;
  }

  /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
  public boolean isSetArguments() {
    return this.arguments != null;
  }

  public void setArgumentsIsSet(boolean value) {
    if (!value) {
      this.arguments = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((ThriftExpressionType)value);
      }
      break;

    case QUERY_TYPE:
      if (value == null) {
        unsetQueryType();
      } else {
        setQueryType((ThriftQueryType)value);
      }
      break;

    case OBJECT_REFERENCE:
      if (value == null) {
        unsetObjectReference();
      } else {
        setObjectReference((String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((String)value);
      }
      break;

    case SCHEMA:
      if (value == null) {
        unsetSchema();
      } else {
        setSchema((List<ThriftExpression>)value);
      }
      break;

    case PARAMETERS:
      if (value == null) {
        unsetParameters();
      } else {
        setParameters((List<ThriftExpression>)value);
      }
      break;

    case ARGUMENTS:
      if (value == null) {
        unsetArguments();
      } else {
        setArguments((List<ThriftExpression>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TYPE:
      return getType();

    case QUERY_TYPE:
      return getQueryType();

    case OBJECT_REFERENCE:
      return getObjectReference();

    case VALUE:
      return getValue();

    case ORDER_TYPE:
      return getOrderType();

    case SCHEMA:
      return getSchema();

    case PARAMETERS:
      return getParameters();

    case ARGUMENTS:
      return getArguments();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TYPE:
      return isSetType();
    case QUERY_TYPE:
      return isSetQueryType();
    case OBJECT_REFERENCE:
      return isSetObjectReference();
    case VALUE:
      return isSetValue();
    case ORDER_TYPE:
      return isSetOrderType();
    case SCHEMA:
      return isSetSchema();
    case PARAMETERS:
      return isSetParameters();
    case ARGUMENTS:
      return isSetArguments();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftExpression)
      return this.equals((ThriftExpression)that);
    return false;
  }

  public boolean equals(ThriftExpression that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_queryType = true && this.isSetQueryType();
    boolean that_present_queryType = true && that.isSetQueryType();
    if (this_present_queryType || that_present_queryType) {
      if (!(this_present_queryType && that_present_queryType))
        return false;
      if (!this.queryType.equals(that.queryType))
        return false;
    }

    boolean this_present_objectReference = true && this.isSetObjectReference();
    boolean that_present_objectReference = true && that.isSetObjectReference();
    if (this_present_objectReference || that_present_objectReference) {
      if (!(this_present_objectReference && that_present_objectReference))
        return false;
      if (!this.objectReference.equals(that.objectReference))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (!this.orderType.equals(that.orderType))
        return false;
    }

    boolean this_present_schema = true && this.isSetSchema();
    boolean that_present_schema = true && that.isSetSchema();
    if (this_present_schema || that_present_schema) {
      if (!(this_present_schema && that_present_schema))
        return false;
      if (!this.schema.equals(that.schema))
        return false;
    }

    boolean this_present_parameters = true && this.isSetParameters();
    boolean that_present_parameters = true && that.isSetParameters();
    if (this_present_parameters || that_present_parameters) {
      if (!(this_present_parameters && that_present_parameters))
        return false;
      if (!this.parameters.equals(that.parameters))
        return false;
    }

    boolean this_present_arguments = true && this.isSetArguments();
    boolean that_present_arguments = true && that.isSetArguments();
    if (this_present_arguments || that_present_arguments) {
      if (!(this_present_arguments && that_present_arguments))
        return false;
      if (!this.arguments.equals(that.arguments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_queryType = true && (isSetQueryType());
    list.add(present_queryType);
    if (present_queryType)
      list.add(queryType.getValue());

    boolean present_objectReference = true && (isSetObjectReference());
    list.add(present_objectReference);
    if (present_objectReference)
      list.add(objectReference);

    boolean present_value = true && (isSetValue());
    list.add(present_value);
    if (present_value)
      list.add(value);

    boolean present_orderType = true && (isSetOrderType());
    list.add(present_orderType);
    if (present_orderType)
      list.add(orderType);

    boolean present_schema = true && (isSetSchema());
    list.add(present_schema);
    if (present_schema)
      list.add(schema);

    boolean present_parameters = true && (isSetParameters());
    list.add(present_parameters);
    if (present_parameters)
      list.add(parameters);

    boolean present_arguments = true && (isSetArguments());
    list.add(present_arguments);
    if (present_arguments)
      list.add(arguments);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftExpression other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryType()).compareTo(other.isSetQueryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryType, other.queryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjectReference()).compareTo(other.isSetObjectReference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjectReference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectReference, other.objectReference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchema()).compareTo(other.isSetSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, other.schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameters()).compareTo(other.isSetParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, other.parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArguments()).compareTo(other.isSetArguments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArguments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, other.arguments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftExpression(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetQueryType()) {
      if (!first) sb.append(", ");
      sb.append("queryType:");
      if (this.queryType == null) {
        sb.append("null");
      } else {
        sb.append(this.queryType);
      }
      first = false;
    }
    if (isSetObjectReference()) {
      if (!first) sb.append(", ");
      sb.append("objectReference:");
      if (this.objectReference == null) {
        sb.append("null");
      } else {
        sb.append(this.objectReference);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetOrderType()) {
      if (!first) sb.append(", ");
      sb.append("orderType:");
      if (this.orderType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderType);
      }
      first = false;
    }
    if (isSetSchema()) {
      if (!first) sb.append(", ");
      sb.append("schema:");
      if (this.schema == null) {
        sb.append("null");
      } else {
        sb.append(this.schema);
      }
      first = false;
    }
    if (isSetParameters()) {
      if (!first) sb.append(", ");
      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
    }
    if (isSetArguments()) {
      if (!first) sb.append(", ");
      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        sb.append(this.arguments);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (id == null) {
      throw new TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftExpressionStandardSchemeFactory implements SchemeFactory {
    public ThriftExpressionStandardScheme getScheme() {
      return new ThriftExpressionStandardScheme();
    }
  }

  private static class ThriftExpressionStandardScheme extends StandardScheme<ThriftExpression> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftExpression struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = ThriftExpressionType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUERY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryType = ThriftQueryType.findByValue(iprot.readI32());
              struct.setQueryTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OBJECT_REFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.objectReference = iprot.readString();
              struct.setObjectReferenceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderType = iprot.readString();
              struct.setOrderTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.schema = new ArrayList<ThriftExpression>(_list0.size);
                ThriftExpression _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ThriftExpression();
                  _elem1.read(iprot);
                  struct.schema.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setSchemaIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.parameters = new ArrayList<ThriftExpression>(_list3.size);
                ThriftExpression _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new ThriftExpression();
                  _elem4.read(iprot);
                  struct.parameters.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setParametersIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ARGUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.arguments = new ArrayList<ThriftExpression>(_list6.size);
                ThriftExpression _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new ThriftExpression();
                  _elem7.read(iprot);
                  struct.arguments.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setArgumentsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftExpression struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.queryType != null) {
        if (struct.isSetQueryType()) {
          oprot.writeFieldBegin(QUERY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.queryType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.objectReference != null) {
        if (struct.isSetObjectReference()) {
          oprot.writeFieldBegin(OBJECT_REFERENCE_FIELD_DESC);
          oprot.writeString(struct.objectReference);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderType != null) {
        if (struct.isSetOrderType()) {
          oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
          oprot.writeString(struct.orderType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.schema != null) {
        if (struct.isSetSchema()) {
          oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.schema.size()));
            for (ThriftExpression _iter9 : struct.schema)
            {
              _iter9.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.parameters != null) {
        if (struct.isSetParameters()) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.parameters.size()));
            for (ThriftExpression _iter10 : struct.parameters)
            {
              _iter10.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.arguments != null) {
        if (struct.isSetArguments()) {
          oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.arguments.size()));
            for (ThriftExpression _iter11 : struct.arguments)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftExpressionTupleSchemeFactory implements SchemeFactory {
    public ThriftExpressionTupleScheme getScheme() {
      return new ThriftExpressionTupleScheme();
    }
  }

  private static class ThriftExpressionTupleScheme extends TupleScheme<ThriftExpression> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftExpression struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeI32(struct.type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetQueryType()) {
        optionals.set(0);
      }
      if (struct.isSetObjectReference()) {
        optionals.set(1);
      }
      if (struct.isSetValue()) {
        optionals.set(2);
      }
      if (struct.isSetOrderType()) {
        optionals.set(3);
      }
      if (struct.isSetSchema()) {
        optionals.set(4);
      }
      if (struct.isSetParameters()) {
        optionals.set(5);
      }
      if (struct.isSetArguments()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetQueryType()) {
        oprot.writeI32(struct.queryType.getValue());
      }
      if (struct.isSetObjectReference()) {
        oprot.writeString(struct.objectReference);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetOrderType()) {
        oprot.writeString(struct.orderType);
      }
      if (struct.isSetSchema()) {
        {
          oprot.writeI32(struct.schema.size());
          for (ThriftExpression _iter12 : struct.schema)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetParameters()) {
        {
          oprot.writeI32(struct.parameters.size());
          for (ThriftExpression _iter13 : struct.parameters)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetArguments()) {
        {
          oprot.writeI32(struct.arguments.size());
          for (ThriftExpression _iter14 : struct.arguments)
          {
            _iter14.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftExpression struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.type = ThriftExpressionType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.queryType = ThriftQueryType.findByValue(iprot.readI32());
        struct.setQueryTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.objectReference = iprot.readString();
        struct.setObjectReferenceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderType = iprot.readString();
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.schema = new ArrayList<ThriftExpression>(_list15.size);
          ThriftExpression _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new ThriftExpression();
            _elem16.read(iprot);
            struct.schema.add(_elem16);
          }
        }
        struct.setSchemaIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.parameters = new ArrayList<ThriftExpression>(_list18.size);
          ThriftExpression _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new ThriftExpression();
            _elem19.read(iprot);
            struct.parameters.add(_elem19);
          }
        }
        struct.setParametersIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.arguments = new ArrayList<ThriftExpression>(_list21.size);
          ThriftExpression _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new ThriftExpression();
            _elem22.read(iprot);
            struct.arguments.add(_elem22);
          }
        }
        struct.setArgumentsIsSet(true);
      }
    }
  }

}

